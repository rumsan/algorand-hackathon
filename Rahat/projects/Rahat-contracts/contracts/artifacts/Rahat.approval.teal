#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// assignBeneficiary(address)void
*abi_route_assignBeneficiary:
	// _address: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (_address) for assignBeneficiary must be a address
	assert

	// execute assignBeneficiary(address)void
	callsub assignBeneficiary
	int 1
	return

// assignBeneficiary(_address: Address): void
//
// A method to assign beneficiary to projects
// @param _address Address
//
// @returns The result of the operation
assignBeneficiary:
	proto 1 0

	// contracts\Rahat.algo.ts:16
	// assert(!this.beneficiaries(_address).exists, 'Beneficiary already assigned to project')
	frame_dig -1 // _address: Address
	box_len
	swap
	pop
	!

	// Beneficiary already assigned to project
	assert

	// contracts\Rahat.algo.ts:18
	// this.beneficiaries(_address).value = 0
	frame_dig -1 // _address: Address
	byte 0x0000000000000000
	box_put
	retsub

// createAnAsset()uint64
*abi_route_createAnAsset:
	// The ABI return prefix
	byte 0x151f7c75

	// execute createAnAsset()uint64
	callsub createAnAsset
	itob
	concat
	log
	int 1
	return

// createAnAsset(): AssetID
//
// A method to create token
//
// @returns Asset (token)
createAnAsset:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\Rahat.algo.ts:27
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Rahat.algo.ts:28
	// asset = sendAssetCreation({
	//       configAssetTotal: 1_000_000_000_000_000,
	//       configAssetFreeze: this.app.address,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:29
	// configAssetTotal: 1_000_000_000_000_000
	int 1_000_000_000_000_000
	itxn_field ConfigAssetTotal

	// contracts\Rahat.algo.ts:30
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // asset: uint64

	// contracts\Rahat.algo.ts:32
	// this.token.value = asset
	byte 0x746f6b656e // "token"
	frame_dig 0 // asset: uint64
	app_global_put

	// contracts\Rahat.algo.ts:33
	// return asset;
	frame_dig 0 // asset: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// sendTokenToBeneficiary(address,uint64)void
*abi_route_sendTokenToBeneficiary:
	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (benAddress) for sendTokenToBeneficiary must be a address
	assert

	// execute sendTokenToBeneficiary(address,uint64)void
	callsub sendTokenToBeneficiary
	int 1
	return

// sendTokenToBeneficiary(benAddress: Address, amount: uint64): void
//
// A method to send tokens to beneficiary
// @param benAddress Address of beneficiary to send token
// @param amount Amount of token to send
sendTokenToBeneficiary:
	proto 2 0

	// contracts\Rahat.algo.ts:42
	// assert(this.beneficiaries(benAddress).exists, 'Beneficiary is not assigned.')
	frame_dig -1 // benAddress: Address
	box_len
	swap
	pop

	// Beneficiary is not assigned.
	assert

	// contracts\Rahat.algo.ts:44
	// sendAssetTransfer({
	//       xferAsset: this.token.value,
	//       assetReceiver: benAddress,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:45
	// xferAsset: this.token.value
	byte 0x746f6b656e // "token"
	app_global_get
	itxn_field XferAsset

	// contracts\Rahat.algo.ts:46
	// assetReceiver: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field AssetReceiver

	// contracts\Rahat.algo.ts:47
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Rahat.algo.ts:51
	// this.beneficiaries(benAddress).value = amount
	frame_dig -1 // benAddress: Address
	frame_dig -2 // amount: uint64
	itob
	box_put

	// contracts\Rahat.algo.ts:54
	// sendAssetFreeze({
	//       freezeAsset: this.token.value,
	//       freezeAssetAccount: benAddress,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:55
	// freezeAsset: this.token.value
	byte 0x746f6b656e // "token"
	app_global_get
	itxn_field FreezeAsset

	// contracts\Rahat.algo.ts:56
	// freezeAssetAccount: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field FreezeAssetAccount

	// contracts\Rahat.algo.ts:57
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// unfreezeBeneficiaryAsset(address)void
*abi_route_unfreezeBeneficiaryAsset:
	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (benAddress) for unfreezeBeneficiaryAsset must be a address
	assert

	// execute unfreezeBeneficiaryAsset(address)void
	callsub unfreezeBeneficiaryAsset
	int 1
	return

// unfreezeBeneficiaryAsset(benAddress: Address): void
//
// A method to unfreeze token
// @param benAddress Address of beneficiary to unfreeze asset
unfreezeBeneficiaryAsset:
	proto 1 0

	// contracts\Rahat.algo.ts:67
	// sendAssetFreeze({
	//       freezeAsset: this.token.value,
	//       freezeAssetAccount: benAddress,
	//       freezeAssetFrozen: false,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:68
	// freezeAsset: this.token.value
	byte 0x746f6b656e // "token"
	app_global_get
	itxn_field FreezeAsset

	// contracts\Rahat.algo.ts:69
	// freezeAssetAccount: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field FreezeAssetAccount

	// contracts\Rahat.algo.ts:70
	// freezeAssetFrozen: false
	int 0
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendTokenToVendor(address,uint64)void
*abi_route_sendTokenToVendor:
	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// venderAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (venderAddress) for sendTokenToVendor must be a address
	assert

	// execute sendTokenToVendor(address,uint64)void
	callsub sendTokenToVendor
	int 1
	return

// sendTokenToVendor(venderAddress: Address, amount: uint64): void
//
// A method to send tokens to vendors
// @param venderAddress Address of vendor to receive tokens
// @param amount Amount of token to send to vendor
sendTokenToVendor:
	proto 2 0

	// contracts\Rahat.algo.ts:81
	// sendAssetTransfer({
	//       xferAsset: this.token.value,
	//       assetReceiver: venderAddress,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:82
	// xferAsset: this.token.value
	byte 0x746f6b656e // "token"
	app_global_get
	itxn_field XferAsset

	// contracts\Rahat.algo.ts:83
	// assetReceiver: venderAddress
	frame_dig -1 // venderAddress: Address
	itxn_field AssetReceiver

	// contracts\Rahat.algo.ts:84
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "assignBeneficiary(address)void"
	method "createAnAsset()uint64"
	method "sendTokenToBeneficiary(address,uint64)void"
	method "unfreezeBeneficiaryAsset(address)void"
	method "sendTokenToVendor(address,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_assignBeneficiary *abi_route_createAnAsset *abi_route_sendTokenToBeneficiary *abi_route_unfreezeBeneficiaryAsset *abi_route_sendTokenToVendor

	// this contract does not implement the given ABI method for call NoOp
	err