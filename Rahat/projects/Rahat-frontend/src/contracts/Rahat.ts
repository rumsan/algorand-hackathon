/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "assignBeneficiary(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAnAsset()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToBeneficiary(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToVendor(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "token": {
          "type": "uint64",
          "key": "token"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Rahat",
    "desc": "",
    "methods": [
      {
        "name": "assignBeneficiary",
        "desc": "A method to assign beneficiary to projects",
        "args": [
          {
            "name": "_address",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "createAnAsset",
        "desc": "A method to create token",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Asset (token)"
        }
      },
      {
        "name": "sendTokenToBeneficiary",
        "desc": "A method to send tokens to beneficiary",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unfreezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendTokenToVendor",
        "desc": "A method to send tokens to vendors",
        "args": [
          {
            "name": "venderAddress",
            "type": "address",
            "desc": "Address of vendor to receive tokens"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send to vendor"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Rahat smart contract.
 */
export type Rahat = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'assignBeneficiary(address)void' | 'assignBeneficiary', {
      argsObj: {
        /**
         * Address
         */
        address: string
      }
      argsTuple: [address: string]
      /**
       * The result of the operation
       */
      returns: void
    }>
    & Record<'createAnAsset()uint64' | 'createAnAsset', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Asset (token)
       */
      returns: bigint
    }>
    & Record<'sendTokenToBeneficiary(address,uint64,uint64)void' | 'sendTokenToBeneficiary', {
      argsObj: {
        /**
         * Address of beneficiary to send token
         */
        benAddress: string
        /**
         * Amount of token to send
         */
        amount: bigint | number
        assetId: bigint | number
      }
      argsTuple: [benAddress: string, amount: bigint | number, assetId: bigint | number]
      returns: void
    }>
    & Record<'unfreezeBeneficiaryAsset(address,uint64)void' | 'unfreezeBeneficiaryAsset', {
      argsObj: {
        /**
         * Address of beneficiary to unfreeze asset
         */
        benAddress: string
        assetId: bigint | number
      }
      argsTuple: [benAddress: string, assetId: bigint | number]
      returns: void
    }>
    & Record<'sendTokenToVendor(address,uint64,uint64)void' | 'sendTokenToVendor', {
      argsObj: {
        /**
         * Address of vendor to receive tokens
         */
        venderAddress: string
        /**
         * Amount of token to send to vendor
         */
        amount: bigint | number
        assetId: bigint | number
      }
      argsTuple: [venderAddress: string, amount: bigint | number, assetId: bigint | number]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      token?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type RahatSig = keyof Rahat['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends RahatSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Rahat smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends RahatSig> = Rahat['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Rahat smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RahatSig> = Rahat['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type RahatCreateCalls = (typeof RahatCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type RahatCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type RahatDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: RahatCreateCalls) => RahatCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class RahatCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Rahat smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assignBeneficiary(address)void ABI method
   *
   * A method to assign beneficiary to projects
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assignBeneficiary(args: MethodArgs<'assignBeneficiary(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assignBeneficiary(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAnAsset()uint64 ABI method
   *
   * A method to create token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAnAsset(args: MethodArgs<'createAnAsset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAnAsset()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendTokenToBeneficiary(address,uint64,uint64)void ABI method
   *
   * A method to send tokens to beneficiary
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendTokenToBeneficiary(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.amount, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unfreezeBeneficiaryAsset(address,uint64)void ABI method
   *
   * A method to unfreeze token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unfreezeBeneficiaryAsset(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendTokenToVendor(address,uint64,uint64)void ABI method
   *
   * A method to send tokens to vendors
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendTokenToVendor(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.venderAddress, args.amount, args.assetId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Rahat smart contract
 */
export class RahatClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `RahatClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Rahat['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Rahat smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: RahatDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(RahatCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Rahat smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(RahatCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Rahat smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the assignBeneficiary(address)void ABI method.
   *
   * A method to assign beneficiary to projects
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The result of the operation
   */
  public assignBeneficiary(args: MethodArgs<'assignBeneficiary(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.assignBeneficiary(args, params))
  }

  /**
   * Calls the createAnAsset()uint64 ABI method.
   *
   * A method to create token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Asset (token)
   */
  public createAnAsset(args: MethodArgs<'createAnAsset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.createAnAsset(args, params))
  }

  /**
   * Calls the sendTokenToBeneficiary(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to beneficiary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.sendTokenToBeneficiary(args, params))
  }

  /**
   * Calls the unfreezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.unfreezeBeneficiaryAsset(args, params))
  }

  /**
   * Calls the sendTokenToVendor(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to vendors
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.sendTokenToVendor(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Rahat['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get token() {
        return RahatClient.getIntegerState(state, 'token')
      },
    }
  }

  public compose(): RahatComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      assignBeneficiary(args: MethodArgs<'assignBeneficiary(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assignBeneficiary(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAnAsset(args: MethodArgs<'createAnAsset()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAnAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendTokenToBeneficiary(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unfreezeBeneficiaryAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendTokenToVendor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as RahatComposer
  }
}
export type RahatComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assignBeneficiary(address)void ABI method.
   *
   * A method to assign beneficiary to projects
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignBeneficiary(args: MethodArgs<'assignBeneficiary(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'assignBeneficiary(address)void'>]>

  /**
   * Calls the createAnAsset()uint64 ABI method.
   *
   * A method to create token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAnAsset(args: MethodArgs<'createAnAsset()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'createAnAsset()uint64'>]>

  /**
   * Calls the sendTokenToBeneficiary(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to beneficiary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'sendTokenToBeneficiary(address,uint64,uint64)void'>]>

  /**
   * Calls the unfreezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'unfreezeBeneficiaryAsset(address,uint64)void'>]>

  /**
   * Calls the sendTokenToVendor(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to vendors
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'sendTokenToVendor(address,uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Rahat smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): RahatComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<RahatComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<RahatComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type RahatComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type RahatComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
