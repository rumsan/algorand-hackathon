{
  "hints": {
    "createProject(uint64,(string,address,address[],address))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addAdminToProject(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProject(uint64)(string,address,address[],address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAnAsset(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToBeneficiary(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "freezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToVendor(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawbackBeneficiaryAsset(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkAdminRecursive(address[],address,uint64)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Rahat",
    "desc": "",
    "methods": [
      {
        "name": "createProject",
        "desc": "A method to create a project",
        "args": [
          {
            "name": "_assetId",
            "type": "uint64"
          },
          {
            "name": "_project",
            "type": "(string,address,address[],address)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addAdminToProject",
        "desc": "A method to assign beneficiary to projects",
        "args": [
          {
            "name": "_address",
            "type": "address",
            "desc": "Address of admin to be assigned"
          },
          {
            "name": "_assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "getProject",
        "desc": "A method to get project",
        "args": [
          {
            "name": "_assetId",
            "type": "uint64",
            "desc": "Address of project to get"
          }
        ],
        "returns": {
          "type": "(string,address,address[],address)",
          "desc": "Project details"
        }
      },
      {
        "name": "createAnAsset",
        "desc": "A method to create token",
        "args": [
          {
            "name": "asaName",
            "type": "string",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "asaSymbol",
            "type": "string",
            "desc": "Address of beneficiary to send token"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendTokenToBeneficiary",
        "desc": "A method to send tokens to beneficiary",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send"
          },
          {
            "name": "assetId",
            "type": "uint64",
            "desc": ": AssetID of token to be sent"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "freezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unfreezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendTokenToVendor",
        "desc": "A method to send tokens to vendors",
        "args": [
          {
            "name": "venderAddress",
            "type": "address",
            "desc": "Address of vendor to receive tokens"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send to vendor"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawbackBeneficiaryAsset",
        "desc": "A method to clawback asset",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to be clawbacked"
          },
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "Asset id of asset"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount, will be replace when box-issue is fixed"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkAdminRecursive",
        "args": [
          {
            "name": "admins",
            "type": "address[]"
          },
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}