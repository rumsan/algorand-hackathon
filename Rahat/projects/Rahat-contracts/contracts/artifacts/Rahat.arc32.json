{
  "hints": {
    "assignBeneficiary(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAnAsset(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToBeneficiary(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToVendor(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "token": {
          "type": "uint64",
          "key": "token"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Rahat",
    "desc": "",
    "methods": [
      {
        "name": "assignBeneficiary",
        "desc": "A method to assign beneficiary to projects",
        "args": [
          {
            "name": "_address",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "createAnAsset",
        "desc": "A method to create token",
        "args": [
          {
            "name": "asaName",
            "type": "string"
          },
          {
            "name": "asaSymbol",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendTokenToBeneficiary",
        "desc": "A method to send tokens to beneficiary",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unfreezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendTokenToVendor",
        "desc": "A method to send tokens to vendors",
        "args": [
          {
            "name": "venderAddress",
            "type": "address",
            "desc": "Address of vendor to receive tokens"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send to vendor"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}