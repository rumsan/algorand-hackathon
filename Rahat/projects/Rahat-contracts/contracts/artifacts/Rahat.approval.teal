#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// assignBeneficiary(address)void
*abi_route_assignBeneficiary:
	// _address: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (_address) for assignBeneficiary must be a address
	assert

	// execute assignBeneficiary(address)void
	callsub assignBeneficiary
	int 1
	return

// assignBeneficiary(_address: Address): void
//
// A method to assign beneficiary to projects
// @param _address Address
//
// @returns The result of the operation
assignBeneficiary:
	proto 1 0

	// contracts\Rahat.algo.ts:17
	// assert(!this.beneficiaries(_address).exists, 'Beneficiary already assigned to project')
	frame_dig -1 // _address: Address
	box_len
	swap
	pop
	!

	// Beneficiary already assigned to project
	assert

	// contracts\Rahat.algo.ts:19
	// this.beneficiaries(_address).value = 0
	frame_dig -1 // _address: Address
	byte 0x0000000000000000
	box_put
	retsub

// createAnAsset(string,string)uint64
*abi_route_createAnAsset:
	// The ABI return prefix
	byte 0x151f7c75

	// asaSymbol: string
	txna ApplicationArgs 2
	extract 2 0

	// asaName: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createAnAsset(string,string)uint64
	callsub createAnAsset
	itob
	concat
	log
	int 1
	return

// createAnAsset(asaName: string, asaSymbol: string): AssetID
//
// A method to create token
// @param benAddress Address of beneficiary to send token
// @param benAddress Address of beneficiary to send token
// @returns Asset (token)
createAnAsset:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\Rahat.algo.ts:30
	// asset = sendAssetCreation({
	//       configAssetTotal: 1_000_000_000_000_000,
	//       configAssetFreeze: this.app.address,
	//       configAssetName: asaName,
	//       configAssetUnitName: asaSymbol,
	//       configAssetClawback: this.app.address
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:31
	// configAssetTotal: 1_000_000_000_000_000
	int 1_000_000_000_000_000
	itxn_field ConfigAssetTotal

	// contracts\Rahat.algo.ts:32
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// contracts\Rahat.algo.ts:33
	// configAssetName: asaName
	frame_dig -1 // asaName: string
	itxn_field ConfigAssetName

	// contracts\Rahat.algo.ts:34
	// configAssetUnitName: asaSymbol
	frame_dig -2 // asaSymbol: string
	itxn_field ConfigAssetUnitName

	// contracts\Rahat.algo.ts:35
	// configAssetClawback: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetClawback

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // asset: uint64

	// contracts\Rahat.algo.ts:38
	// this.token.value = asset
	byte 0x746f6b656e // "token"
	frame_dig 0 // asset: uint64
	app_global_put

	// contracts\Rahat.algo.ts:39
	// return asset;
	frame_dig 0 // asset: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// sendTokenToBeneficiary(address,uint64,uint64)void
*abi_route_sendTokenToBeneficiary:
	// assetId: uint64
	txna ApplicationArgs 3
	btoi

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (benAddress) for sendTokenToBeneficiary must be a address
	assert

	// execute sendTokenToBeneficiary(address,uint64,uint64)void
	callsub sendTokenToBeneficiary
	int 1
	return

// sendTokenToBeneficiary(benAddress: Address, amount: uint64, assetId: AssetID): void
//
// A method to send tokens to beneficiary
// @param benAddress Address of beneficiary to send token
// @param amount Amount of token to send
// @param assetId: AssetID of token to be sent
sendTokenToBeneficiary:
	proto 3 0

	// contracts\Rahat.algo.ts:53
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Rahat.algo.ts:56
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetReceiver: benAddress,
	//       assetAmount: amount
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:57
	// xferAsset: assetId
	frame_dig -3 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Rahat.algo.ts:58
	// assetReceiver: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field AssetReceiver

	// contracts\Rahat.algo.ts:59
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Rahat.algo.ts:66
	// sendAssetFreeze({
	//       freezeAsset: assetId,
	//       freezeAssetAccount: benAddress,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:67
	// freezeAsset: assetId
	frame_dig -3 // assetId: AssetID
	itxn_field FreezeAsset

	// contracts\Rahat.algo.ts:68
	// freezeAssetAccount: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field FreezeAssetAccount

	// contracts\Rahat.algo.ts:69
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// freezeBeneficiaryAsset(address,uint64)void
*abi_route_freezeBeneficiaryAsset:
	// assetId: uint64
	txna ApplicationArgs 2
	btoi

	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (benAddress) for freezeBeneficiaryAsset must be a address
	assert

	// execute freezeBeneficiaryAsset(address,uint64)void
	callsub freezeBeneficiaryAsset
	int 1
	return

// freezeBeneficiaryAsset(benAddress: Address, assetId: AssetID): void
//
// A method to unfreeze token
// @param benAddress Address of beneficiary to unfreeze asset
freezeBeneficiaryAsset:
	proto 2 0

	// contracts\Rahat.algo.ts:78
	// sendAssetFreeze({
	//       freezeAsset: assetId,
	//       freezeAssetAccount: benAddress,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:79
	// freezeAsset: assetId
	frame_dig -2 // assetId: AssetID
	itxn_field FreezeAsset

	// contracts\Rahat.algo.ts:80
	// freezeAssetAccount: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field FreezeAssetAccount

	// contracts\Rahat.algo.ts:81
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// unfreezeBeneficiaryAsset(address,uint64)void
*abi_route_unfreezeBeneficiaryAsset:
	// assetId: uint64
	txna ApplicationArgs 2
	btoi

	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (benAddress) for unfreezeBeneficiaryAsset must be a address
	assert

	// execute unfreezeBeneficiaryAsset(address,uint64)void
	callsub unfreezeBeneficiaryAsset
	int 1
	return

// unfreezeBeneficiaryAsset(benAddress: Address, assetId: AssetID): void
//
// A method to unfreeze token
// @param benAddress Address of beneficiary to unfreeze asset
unfreezeBeneficiaryAsset:
	proto 2 0

	// contracts\Rahat.algo.ts:92
	// assert(this.txn.sender === addr('2WH45FYP7OGC5ZB5WKSEKLELLUKJ5FWLRXBUCZBYSGQYFSPHLD6D6USKPY'), "Not multisig address")
	txn Sender
	addr 2WH45FYP7OGC5ZB5WKSEKLELLUKJ5FWLRXBUCZBYSGQYFSPHLD6D6USKPY
	==

	// Not multisig address
	assert

	// contracts\Rahat.algo.ts:94
	// sendAssetFreeze({
	//       freezeAsset: assetId,
	//       freezeAssetAccount: benAddress,
	//       freezeAssetFrozen: false,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:95
	// freezeAsset: assetId
	frame_dig -2 // assetId: AssetID
	itxn_field FreezeAsset

	// contracts\Rahat.algo.ts:96
	// freezeAssetAccount: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field FreezeAssetAccount

	// contracts\Rahat.algo.ts:97
	// freezeAssetFrozen: false
	int 0
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendTokenToVendor(address,uint64,uint64)void
*abi_route_sendTokenToVendor:
	// assetId: uint64
	txna ApplicationArgs 3
	btoi

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// venderAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (venderAddress) for sendTokenToVendor must be a address
	assert

	// execute sendTokenToVendor(address,uint64,uint64)void
	callsub sendTokenToVendor
	int 1
	return

// sendTokenToVendor(venderAddress: Address, amount: uint64, assetId: AssetID): void
//
// A method to send tokens to vendors
// @param venderAddress Address of vendor to receive tokens
// @param amount Amount of token to send to vendor
sendTokenToVendor:
	proto 3 0

	// contracts\Rahat.algo.ts:108
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetReceiver: venderAddress,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:109
	// xferAsset: assetId
	frame_dig -3 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Rahat.algo.ts:110
	// assetReceiver: venderAddress
	frame_dig -1 // venderAddress: Address
	itxn_field AssetReceiver

	// contracts\Rahat.algo.ts:111
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// clawbackBeneficiaryAsset(address,uint64,uint64)void
*abi_route_clawbackBeneficiaryAsset:
	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// assetId: uint64
	txna ApplicationArgs 2
	btoi

	// benAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (benAddress) for clawbackBeneficiaryAsset must be a address
	assert

	// execute clawbackBeneficiaryAsset(address,uint64,uint64)void
	callsub clawbackBeneficiaryAsset
	int 1
	return

// clawbackBeneficiaryAsset(benAddress: Address, assetId: AssetID, amount: uint64): void
//
// A method to clawback asset
// @param benAddress Address of beneficiary to be clawbacked
// @param assetId Asset id of asset
// @param amount Amount, will be replace when box-issue is fixed
clawbackBeneficiaryAsset:
	proto 3 0

	// contracts\Rahat.algo.ts:127
	// this.unfreezeBeneficiaryAsset(benAddress, assetId)
	frame_dig -2 // assetId: AssetID
	frame_dig -1 // benAddress: Address
	callsub unfreezeBeneficiaryAsset

	// *if0_condition
	// contracts\Rahat.algo.ts:129
	// true
	int 1
	bz *if0_end

// *if0_consequent
*if0_end:
	// contracts\Rahat.algo.ts:134
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetSender: benAddress,
	//       assetReceiver: this.app.address,
	//       assetAmount: amount,
	//   })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Rahat.algo.ts:135
	// xferAsset: assetId
	frame_dig -2 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Rahat.algo.ts:136
	// assetSender: benAddress
	frame_dig -1 // benAddress: Address
	itxn_field AssetSender

	// contracts\Rahat.algo.ts:137
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts\Rahat.algo.ts:138
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "assignBeneficiary(address)void"
	method "createAnAsset(string,string)uint64"
	method "sendTokenToBeneficiary(address,uint64,uint64)void"
	method "freezeBeneficiaryAsset(address,uint64)void"
	method "unfreezeBeneficiaryAsset(address,uint64)void"
	method "sendTokenToVendor(address,uint64,uint64)void"
	method "clawbackBeneficiaryAsset(address,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_assignBeneficiary *abi_route_createAnAsset *abi_route_sendTokenToBeneficiary *abi_route_freezeBeneficiaryAsset *abi_route_unfreezeBeneficiaryAsset *abi_route_sendTokenToVendor *abi_route_clawbackBeneficiaryAsset

	// this contract does not implement the given ABI method for call NoOp
	err