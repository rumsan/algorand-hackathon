/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createProject(uint64,(string,address,address[]))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addAdminToProject(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProject(uint64)(string,address,address[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAnAsset(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToBeneficiary(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkAdminRecursive(address[],address,uint64)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "freezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreezeBeneficiaryAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendTokenToVendor(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawbackBeneficiaryAsset(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjkyLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZVByb2plY3QodWludDY0LChzdHJpbmcsYWRkcmVzcyxhZGRyZXNzW10pKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVQcm9qZWN0OgoJLy8gX3Byb2plY3Q6IChzdHJpbmcsYWRkcmVzcyxhZGRyZXNzW10pCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCgoJLy8gX2Fzc2V0SWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlUHJvamVjdCh1aW50NjQsKHN0cmluZyxhZGRyZXNzLGFkZHJlc3NbXSkpdm9pZAoJY2FsbHN1YiBjcmVhdGVQcm9qZWN0CglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVQcm9qZWN0KF9hc3NldElkOkFzc2V0SUQsIF9wcm9qZWN0OiBwcm9qZWN0VHlwZSk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gY3JlYXRlIGEgcHJvamVjdAovLyBAcGFyYW0gX2lkIFVuaXF1ZSBhZGRyZXNzIG9mIHByb2plY3QKLy8gQHBhcmFtIF9wcm9qZWN0IFByb2plY3QgdHlwZQovLyBAcmV0dXJucyBWb2lkCmNyZWF0ZVByb2plY3Q6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoyNQoJLy8gdGhpcy5wcm9qZWN0KF9hc3NldElkKS52YWx1ZSA9IF9wcm9qZWN0CglmcmFtZV9kaWcgLTEgLy8gX2Fzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTIgLy8gX3Byb2plY3Q6IHByb2plY3RUeXBlCglib3hfcHV0CglyZXRzdWIKCi8vIGFkZEFkbWluVG9Qcm9qZWN0KGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9hZGRBZG1pblRvUHJvamVjdDoKCS8vIF9hc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBfYWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAxIChfYWRkcmVzcykgZm9yIGFkZEFkbWluVG9Qcm9qZWN0IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGFkZEFkbWluVG9Qcm9qZWN0KGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgYWRkQWRtaW5Ub1Byb2plY3QKCWludCAxCglyZXR1cm4KCi8vIGFkZEFkbWluVG9Qcm9qZWN0KF9hZGRyZXNzOiBBZGRyZXNzLCBfYXNzZXRJZDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gYXNzaWduIGJlbmVmaWNpYXJ5IHRvIHByb2plY3RzCi8vIEBwYXJhbSBfYWRkcmVzcyBBZGRyZXNzIG9mIGFkbWluIHRvIGJlIGFzc2lnbmVkCi8vIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvbgphZGRBZG1pblRvUHJvamVjdDoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjM0CgkvLyBhc3NlcnQodGhpcy5wcm9qZWN0KF9hc3NldElkKS52YWx1ZS5zdXBlckFkbWluID09PSB0aGlzLnR4bi5zZW5kZXIsICJPbmx5IHN1cGVyIGFkbWluIGNhbiBhc3NpZ24gYWRtaW4iKQoJZnJhbWVfZGlnIC0yIC8vIF9hc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2plY3QoX2Fzc2V0SWQpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDIgMzIKCXR4biBTZW5kZXIKCT09CgoJLy8gT25seSBzdXBlciBhZG1pbiBjYW4gYXNzaWduIGFkbWluCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czozNQoJLy8gdGhpcy5wcm9qZWN0KF9hc3NldElkKS52YWx1ZS5hZG1pbnMgPSBbX2FkZHJlc3NdCglmcmFtZV9kaWcgLTIgLy8gX2Fzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvamVjdChfYXNzZXRJZCkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzNAoJZHVwCglzdG9yZSAyNTEgLy8gZWxlbWVudCBoZWFkIG9mZnNldAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwCglzdG9yZSAyNTQgLy8gZWxlbWVudCBzdGFydAoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMzIgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCXN0b3JlIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAKCWxvYWQgMjU0IC8vIGVsZW1lbnQgc3RhcnQKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBfYWRkcmVzczogQWRkcmVzcwoJZHVwCglsZW4KCWludCAzMgoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJZHVwCglzdG9yZSAyNTIgLy8gbmV3IGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU0IC8vIGVsZW1lbnQgc3RhcnQKCWxvYWQgMjUzIC8vIGVsZW1lbnQgbGVuZ3RoCgkrIC8vIGdldCBlbmQgb2YgRWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbGVuCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWNhbGxzdWIgKmdldF9sZW5ndGhfZGlmZmVyZW5jZQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZnJhbWVfZGlnIC0yIC8vIF9hc3NldElkOiBBc3NldElECglpdG9iCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoJcmV0c3ViCgovLyBnZXRQcm9qZWN0KHVpbnQ2NCkoc3RyaW5nLGFkZHJlc3MsYWRkcmVzc1tdKQoqYWJpX3JvdXRlX2dldFByb2plY3Q6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIF9hc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGdldFByb2plY3QodWludDY0KShzdHJpbmcsYWRkcmVzcyxhZGRyZXNzW10pCgljYWxsc3ViIGdldFByb2plY3QKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRQcm9qZWN0KF9hc3NldElkOiBBc3NldElEKTogcHJvamVjdFR5cGUKLy8KLy8gQSBtZXRob2QgdG8gZ2V0IGFkbWluCi8vIEBwYXJhbSBfYXNzZXRJZCBBZGRyZXNzIG9mIGFkbWluIHRvIGJlIGFzc2lnbmVkCi8vIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvbgpnZXRQcm9qZWN0OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NDQKCS8vIHJldHVybiB0aGlzLnByb2plY3QoX2Fzc2V0SWQpLnZhbHVlOwoJZnJhbWVfZGlnIC0xIC8vIF9hc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2plY3QoX2Fzc2V0SWQpLnZhbHVlCglhc3NlcnQKCXJldHN1YgoKLy8gY3JlYXRlQW5Bc3NldChzdHJpbmcsc3RyaW5nKXVpbnQ2NAoqYWJpX3JvdXRlX2NyZWF0ZUFuQXNzZXQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFzYVN5bWJvbDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFzYU5hbWU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNyZWF0ZUFuQXNzZXQoc3RyaW5nLHN0cmluZyl1aW50NjQKCWNhbGxzdWIgY3JlYXRlQW5Bc3NldAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFuQXNzZXQoYXNhTmFtZTogc3RyaW5nLCBhc2FTeW1ib2w6IHN0cmluZyk6IEFzc2V0SUQKLy8KLy8gQSBtZXRob2QgdG8gY3JlYXRlIHRva2VuCi8vIEBwYXJhbSBhc2FOYW1lIEFkZHJlc3Mgb2YgYmVuZWZpY2lhcnkgdG8gc2VuZCB0b2tlbgovLyBAcGFyYW0gYXNhU3ltYm9sIEFkZHJlc3Mgb2YgYmVuZWZpY2lhcnkgdG8gc2VuZCB0b2tlbgovLyBAcGFyYW0gX25hbWUgQWRkcmVzcyBvZiBiZW5lZmljaWFyeSB0byBzZW5kIHRva2VuCi8vIEByZXR1cm5zIEFzc2V0ICh0b2tlbikKY3JlYXRlQW5Bc3NldDoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NTUKCS8vIGFzc2V0ID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgY29uZmlnQXNzZXRUb3RhbDogMV8wMDBfMDAwXzAwMF8wMDBfMDAwLAoJLy8gICAgICAgY29uZmlnQXNzZXRGcmVlemU6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBjb25maWdBc3NldE5hbWU6IGFzYU5hbWUsCgkvLyAgICAgICBjb25maWdBc3NldFVuaXROYW1lOiBhc2FTeW1ib2wsCgkvLyAgICAgICBjb25maWdBc3NldENsYXdiYWNrOiB0aGlzLmFwcC5hZGRyZXNzCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NTYKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IDFfMDAwXzAwMF8wMDBfMDAwXzAwMAoJaW50IDFfMDAwXzAwMF8wMDBfMDAwXzAwMAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NTcKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjU4CgkvLyBjb25maWdBc3NldE5hbWU6IGFzYU5hbWUKCWZyYW1lX2RpZyAtMSAvLyBhc2FOYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NTkKCS8vIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6IGFzYVN5bWJvbAoJZnJhbWVfZGlnIC0yIC8vIGFzYVN5bWJvbDogc3RyaW5nCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czo2MAoJLy8gY29uZmlnQXNzZXRDbGF3YmFjazogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCWZyYW1lX2J1cnkgMCAvLyBhc3NldDogdWludDY0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NjIKCS8vIHJldHVybiBhc3NldDsKCWZyYW1lX2RpZyAwIC8vIGFzc2V0OiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gc2VuZFRva2VuVG9CZW5lZmljaWFyeShhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NlbmRUb2tlblRvQmVuZWZpY2lhcnk6CgkvLyBhc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGJlbkFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMiAoYmVuQWRkcmVzcykgZm9yIHNlbmRUb2tlblRvQmVuZWZpY2lhcnkgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgc2VuZFRva2VuVG9CZW5lZmljaWFyeShhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBzZW5kVG9rZW5Ub0JlbmVmaWNpYXJ5CglpbnQgMQoJcmV0dXJuCgovLyBzZW5kVG9rZW5Ub0JlbmVmaWNpYXJ5KGJlbkFkZHJlc3M6IEFkZHJlc3MsIGFtb3VudDogdWludDY0LCBhc3NldElkOiBBc3NldElEKTogdm9pZAovLwovLyBBIG1ldGhvZCB0byBzZW5kIHRva2VucyB0byBiZW5lZmljaWFyeQovLyBAcGFyYW0gYmVuQWRkcmVzcyBBZGRyZXNzIG9mIGJlbmVmaWNpYXJ5IHRvIHNlbmQgdG9rZW4KLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgb2YgdG9rZW4gdG8gc2VuZAovLyBAcGFyYW0gYXNzZXRJZDogQXNzZXRJRCBvZiB0b2tlbiB0byBiZSBzZW50CnNlbmRUb2tlblRvQmVuZWZpY2lhcnk6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NzQKCS8vIHByb2plY3RBZG1pbnMgPSB0aGlzLnByb2plY3QoYXNzZXRJZCkudmFsdWUuYWRtaW5zCglmcmFtZV9kaWcgLTMgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm9qZWN0QWRtaW5zCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6NzUKCS8vIGlzQWRtaW4gPSB0aGlzLmNoZWNrQWRtaW5SZWN1cnNpdmUocHJvamVjdEFkbWlucywgdGhpcy50eG4uc2VuZGVyLCAwKQoJaW50IDAKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm9qZWN0QWRtaW5zCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2plY3QoYXNzZXRJZCkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzNAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMzIgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJY2FsbHN1YiBjaGVja0FkbWluUmVjdXJzaXZlCglmcmFtZV9idXJ5IDEgLy8gaXNBZG1pbjogYm9vbAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjc2CgkvLyBhc3NlcnQoaXNBZG1pbiwgIk5vdCBhbiBhZG1pbiIpCglmcmFtZV9kaWcgMSAvLyBpc0FkbWluOiBib29sCgoJLy8gTm90IGFuIGFkbWluCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czo3OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldElkLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogYmVuQWRkcmVzcywKCS8vICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6ODAKCS8vIHhmZXJBc3NldDogYXNzZXRJZAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6ODEKCS8vIGFzc2V0UmVjZWl2ZXI6IGJlbkFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBiZW5BZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czo4MgoJLy8gYXNzZXRBbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjg2CgkvLyBzZW5kQXNzZXRGcmVlemUoewoJLy8gICAgICAgZnJlZXplQXNzZXQ6IGFzc2V0SWQsCgkvLyAgICAgICBmcmVlemVBc3NldEFjY291bnQ6IGJlbkFkZHJlc3MsCgkvLyAgICAgICBmcmVlemVBc3NldEZyb3plbjogdHJ1ZSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFmcnoKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czo4NwoJLy8gZnJlZXplQXNzZXQ6IGFzc2V0SWQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldElkOiBBc3NldElECglpdHhuX2ZpZWxkIEZyZWV6ZUFzc2V0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6ODgKCS8vIGZyZWV6ZUFzc2V0QWNjb3VudDogYmVuQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGJlbkFkZHJlc3M6IEFkZHJlc3MKCWl0eG5fZmllbGQgRnJlZXplQXNzZXRBY2NvdW50CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6ODkKCS8vIGZyZWV6ZUFzc2V0RnJvemVuOiB0cnVlCglpbnQgMQoJaXR4bl9maWVsZCBGcmVlemVBc3NldEZyb3plbgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gY2hlY2tBZG1pblJlY3Vyc2l2ZShhZGRyZXNzW10sYWRkcmVzcyx1aW50NjQpYm9vbAoqYWJpX3JvdXRlX2NoZWNrQWRtaW5SZWN1cnNpdmU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBhZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGFkZHJlc3MpIGZvciBjaGVja0FkbWluUmVjdXJzaXZlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBhZG1pbnM6IGFkZHJlc3NbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNoZWNrQWRtaW5SZWN1cnNpdmUoYWRkcmVzc1tdLGFkZHJlc3MsdWludDY0KWJvb2wKCWNhbGxzdWIgY2hlY2tBZG1pblJlY3Vyc2l2ZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjaGVja0FkbWluUmVjdXJzaXZlKGFkbWluczogQWRkcmVzc1tdLCBhZGRyZXNzOiBBZGRyZXNzLCBpbmRleDogdWludDY0KTogYm9vbGVhbgpjaGVja0FkbWluUmVjdXJzaXZlOgoJcHJvdG8gMyAxCgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjk0CgkvLyBpbmRleCA+PSBhZG1pbnMubGVuZ3RoCglmcmFtZV9kaWcgLTMgLy8gaW5kZXg6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFkbWluczogQWRkcmVzc1tdCglsZW4KCWludCAzMgoJLwoJPj0KCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czo5NQoJLy8gcmV0dXJuIGZhbHNlOwoJaW50IDAKCXJldHN1YgoKKmlmMF9lbmQ6CgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6OTcKCS8vIGFkbWluc1tpbmRleF0gPT0gYWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGFkbWluczogQWRkcmVzc1tdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAgLy8gaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyBpbmRleDogdWludDY0CglpbnQgMzIKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50IDMyCglleHRyYWN0MwoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3M6IEFkZHJlc3MKCT09CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6OTgKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMDAKCS8vIHJldHVybiB0aGlzLmNoZWNrQWRtaW5SZWN1cnNpdmUoYWRtaW5zLCBhZGRyZXNzLCBpbmRleCArIDEpOwoJZnJhbWVfZGlnIC0zIC8vIGluZGV4OiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzczogQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGFkbWluczogQWRkcmVzc1tdCgljYWxsc3ViIGNoZWNrQWRtaW5SZWN1cnNpdmUKCXJldHN1YgoKLy8gZnJlZXplQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfZnJlZXplQmVuZWZpY2lhcnlBc3NldDoKCS8vIGFzc2V0SWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGJlbkFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoYmVuQWRkcmVzcykgZm9yIGZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZnJlZXplQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQKCWludCAxCglyZXR1cm4KCi8vIGZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQoYmVuQWRkcmVzczogQWRkcmVzcywgYXNzZXRJZDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gdW5mcmVlemUgdG9rZW4KLy8gQHBhcmFtIGJlbkFkZHJlc3MgQWRkcmVzcyBvZiBiZW5lZmljaWFyeSB0byB1bmZyZWV6ZSBhc3NldApmcmVlemVCZW5lZmljaWFyeUFzc2V0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjEwOQoJLy8gcHJvamVjdEFkbWlucyA9IHRoaXMucHJvamVjdChhc3NldElkKS52YWx1ZS5hZG1pbnMKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL3Byb2plY3RBZG1pbnMKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMTAKCS8vIGlzQWRtaW4gPSB0aGlzLmNoZWNrQWRtaW5SZWN1cnNpdmUocHJvamVjdEFkbWlucywgdGhpcy50eG4uc2VuZGVyLCAwKQoJaW50IDAKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm9qZWN0QWRtaW5zCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2plY3QoYXNzZXRJZCkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzNAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMzIgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJY2FsbHN1YiBjaGVja0FkbWluUmVjdXJzaXZlCglmcmFtZV9idXJ5IDEgLy8gaXNBZG1pbjogYm9vbAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjExMQoJLy8gYXNzZXJ0KGlzQWRtaW4sICJOb3QgYW4gYWRtaW4iKQoJZnJhbWVfZGlnIDEgLy8gaXNBZG1pbjogYm9vbAoKCS8vIE5vdCBhbiBhZG1pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTEzCgkvLyBzZW5kQXNzZXRGcmVlemUoewoJLy8gICAgICAgZnJlZXplQXNzZXQ6IGFzc2V0SWQsCgkvLyAgICAgICBmcmVlemVBc3NldEFjY291bnQ6IGJlbkFkZHJlc3MsCgkvLyAgICAgICBmcmVlemVBc3NldEZyb3plbjogdHJ1ZSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFmcnoKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMTQKCS8vIGZyZWV6ZUFzc2V0OiBhc3NldElkCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXR4bl9maWVsZCBGcmVlemVBc3NldAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjExNQoJLy8gZnJlZXplQXNzZXRBY2NvdW50OiBiZW5BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYmVuQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBGcmVlemVBc3NldEFjY291bnQKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMTYKCS8vIGZyZWV6ZUFzc2V0RnJvemVuOiB0cnVlCglpbnQgMQoJaXR4bl9maWVsZCBGcmVlemVBc3NldEZyb3plbgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gdW5mcmVlemVCZW5lZmljaWFyeUFzc2V0KGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV91bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQ6CgkvLyBhc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBiZW5BZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGJlbkFkZHJlc3MpIGZvciB1bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgdW5mcmVlemVCZW5lZmljaWFyeUFzc2V0KGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgdW5mcmVlemVCZW5lZmljaWFyeUFzc2V0CglpbnQgMQoJcmV0dXJuCgovLyB1bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQoYmVuQWRkcmVzczogQWRkcmVzcywgYXNzZXRJZDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gdW5mcmVlemUgdG9rZW4KLy8gQHBhcmFtIGJlbkFkZHJlc3MgQWRkcmVzcyBvZiBiZW5lZmljaWFyeSB0byB1bmZyZWV6ZSBhc3NldAp1bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQ6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTI2CgkvLyBwcm9qZWN0QWRtaW5zID0gdGhpcy5wcm9qZWN0KGFzc2V0SWQpLnZhbHVlLmFkbWlucwoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vcHJvamVjdEFkbWlucwoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjEyNwoJLy8gaXNBZG1pbiA9IHRoaXMuY2hlY2tBZG1pblJlY3Vyc2l2ZShwcm9qZWN0QWRtaW5zLCB0aGlzLnR4bi5zZW5kZXIsIDApCglpbnQgMAoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL3Byb2plY3RBZG1pbnMKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvamVjdChhc3NldElkKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDM0Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAzMiAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCgljYWxsc3ViIGNoZWNrQWRtaW5SZWN1cnNpdmUKCWZyYW1lX2J1cnkgMSAvLyBpc0FkbWluOiBib29sCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTI4CgkvLyBhc3NlcnQoaXNBZG1pbiwgIk5vdCBhbiBhZG1pbiIpCglmcmFtZV9kaWcgMSAvLyBpc0FkbWluOiBib29sCgoJLy8gTm90IGFuIGFkbWluCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMzAKCS8vIHNlbmRBc3NldEZyZWV6ZSh7CgkvLyAgICAgICBmcmVlemVBc3NldDogYXNzZXRJZCwKCS8vICAgICAgIGZyZWV6ZUFzc2V0QWNjb3VudDogYmVuQWRkcmVzcywKCS8vICAgICAgIGZyZWV6ZUFzc2V0RnJvemVuOiBmYWxzZSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFmcnoKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMzEKCS8vIGZyZWV6ZUFzc2V0OiBhc3NldElkCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXR4bl9maWVsZCBGcmVlemVBc3NldAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjEzMgoJLy8gZnJlZXplQXNzZXRBY2NvdW50OiBiZW5BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYmVuQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBGcmVlemVBc3NldEFjY291bnQKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxMzMKCS8vIGZyZWV6ZUFzc2V0RnJvemVuOiBmYWxzZQoJaW50IDAKCWl0eG5fZmllbGQgRnJlZXplQXNzZXRGcm96ZW4KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHNlbmRUb2tlblRvVmVuZG9yKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfc2VuZFRva2VuVG9WZW5kb3I6CgkvLyBhc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHZlbmRlckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMiAodmVuZGVyQWRkcmVzcykgZm9yIHNlbmRUb2tlblRvVmVuZG9yIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHNlbmRUb2tlblRvVmVuZG9yKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNlbmRUb2tlblRvVmVuZG9yCglpbnQgMQoJcmV0dXJuCgovLyBzZW5kVG9rZW5Ub1ZlbmRvcih2ZW5kZXJBZGRyZXNzOiBBZGRyZXNzLCBhbW91bnQ6IHVpbnQ2NCwgYXNzZXRJZDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gc2VuZCB0b2tlbnMgdG8gdmVuZG9ycwovLyBAcGFyYW0gdmVuZGVyQWRkcmVzcyBBZGRyZXNzIG9mIHZlbmRvciB0byByZWNlaXZlIHRva2VucwovLyBAcGFyYW0gYW1vdW50IEFtb3VudCBvZiB0b2tlbiB0byBzZW5kIHRvIHZlbmRvcgpzZW5kVG9rZW5Ub1ZlbmRvcjoKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjE0MwoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB2ZW5kZXJBZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTQ0CgkvLyBzZW5kZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxNDUKCS8vIHhmZXJBc3NldDogYXNzZXRJZAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTQ2CgkvLyBhc3NldFJlY2VpdmVyOiB2ZW5kZXJBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmVuZGVyQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTQ3CgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNsYXdiYWNrQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NsYXdiYWNrQmVuZWZpY2lhcnlBc3NldDoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYXNzZXRJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYmVuQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAyIChiZW5BZGRyZXNzKSBmb3IgY2xhd2JhY2tCZW5lZmljaWFyeUFzc2V0IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGNsYXdiYWNrQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjbGF3YmFja0JlbmVmaWNpYXJ5QXNzZXQKCWludCAxCglyZXR1cm4KCi8vIGNsYXdiYWNrQmVuZWZpY2lhcnlBc3NldChiZW5BZGRyZXNzOiBBZGRyZXNzLCBhc3NldElkOiBBc3NldElELCBhbW91bnQ6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gQSBtZXRob2QgdG8gY2xhd2JhY2sgYXNzZXQKLy8gQHBhcmFtIGJlbkFkZHJlc3MgQWRkcmVzcyBvZiBiZW5lZmljaWFyeSB0byBiZSBjbGF3YmFja2VkCi8vIEBwYXJhbSBhc3NldElkIEFzc2V0IGlkIG9mIGFzc2V0Ci8vIEBwYXJhbSBhbW91bnQgQW1vdW50LCB3aWxsIGJlIHJlcGxhY2Ugd2hlbiBib3gtaXNzdWUgaXMgZml4ZWQKY2xhd2JhY2tCZW5lZmljaWFyeUFzc2V0OgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjE1OQoJLy8gcHJvamVjdEFkbWlucyA9IHRoaXMucHJvamVjdChhc3NldElkKS52YWx1ZS5hZG1pbnMKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL3Byb2plY3RBZG1pbnMKCgkvLyBjb250cmFjdHNcUmFoYXQuYWxnby50czoxNjAKCS8vIGlzQWRtaW4gPSB0aGlzLmNoZWNrQWRtaW5SZWN1cnNpdmUocHJvamVjdEFkbWlucywgdGhpcy50eG4uc2VuZGVyLCAwKQoJaW50IDAKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9wcm9qZWN0QWRtaW5zCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2plY3QoYXNzZXRJZCkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzNAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMzIgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJY2FsbHN1YiBjaGVja0FkbWluUmVjdXJzaXZlCglmcmFtZV9idXJ5IDEgLy8gaXNBZG1pbjogYm9vbAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjE2MQoJLy8gYXNzZXJ0KGlzQWRtaW4sICJOb3QgYW4gYWRtaW4iKQoJZnJhbWVfZGlnIDEgLy8gaXNBZG1pbjogYm9vbAoKCS8vIE5vdCBhbiBhZG1pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTY0CgkvLyB0aGlzLnVuZnJlZXplQmVuZWZpY2lhcnlBc3NldChiZW5BZGRyZXNzLCBhc3NldElkKQoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWZyYW1lX2RpZyAtMSAvLyBiZW5BZGRyZXNzOiBBZGRyZXNzCgljYWxsc3ViIHVuZnJlZXplQmVuZWZpY2lhcnlBc3NldAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjE2NwoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldElkLAoJLy8gICAgICAgYXNzZXRTZW5kZXI6IGJlbkFkZHJlc3MsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTY4CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0SWQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldElkOiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xSYWhhdC5hbGdvLnRzOjE2OQoJLy8gYXNzZXRTZW5kZXI6IGJlbkFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBiZW5BZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0U2VuZGVyCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTcwCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXFJhaGF0LmFsZ28udHM6MTcxCgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnQgMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJjcmVhdGVQcm9qZWN0KHVpbnQ2NCwoc3RyaW5nLGFkZHJlc3MsYWRkcmVzc1tdKSl2b2lkIgoJbWV0aG9kICJhZGRBZG1pblRvUHJvamVjdChhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJnZXRQcm9qZWN0KHVpbnQ2NCkoc3RyaW5nLGFkZHJlc3MsYWRkcmVzc1tdKSIKCW1ldGhvZCAiY3JlYXRlQW5Bc3NldChzdHJpbmcsc3RyaW5nKXVpbnQ2NCIKCW1ldGhvZCAic2VuZFRva2VuVG9CZW5lZmljaWFyeShhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZCIKCW1ldGhvZCAiY2hlY2tBZG1pblJlY3Vyc2l2ZShhZGRyZXNzW10sYWRkcmVzcyx1aW50NjQpYm9vbCIKCW1ldGhvZCAiZnJlZXplQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJ1bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQoYWRkcmVzcyx1aW50NjQpdm9pZCIKCW1ldGhvZCAic2VuZFRva2VuVG9WZW5kb3IoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImNsYXdiYWNrQmVuZWZpY2lhcnlBc3NldChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlUHJvamVjdCAqYWJpX3JvdXRlX2FkZEFkbWluVG9Qcm9qZWN0ICphYmlfcm91dGVfZ2V0UHJvamVjdCAqYWJpX3JvdXRlX2NyZWF0ZUFuQXNzZXQgKmFiaV9yb3V0ZV9zZW5kVG9rZW5Ub0JlbmVmaWNpYXJ5ICphYmlfcm91dGVfY2hlY2tBZG1pblJlY3Vyc2l2ZSAqYWJpX3JvdXRlX2ZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQgKmFiaV9yb3V0ZV91bmZyZWV6ZUJlbmVmaWNpYXJ5QXNzZXQgKmFiaV9yb3V0ZV9zZW5kVG9rZW5Ub1ZlbmRvciAqYWJpX3JvdXRlX2NsYXdiYWNrQmVuZWZpY2lhcnlBc3NldAoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmdldF9sZW5ndGhfZGlmZmVyZW5jZToKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50Cglsb2FkIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJPAoJYm56ICpzd2FwcGVkX2RpZmZlcmVuY2UKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50Cglsb2FkIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJaW50IDEKCXN0b3JlIDI0OSAvLyBzdWJ0cmFjdCBoZWFkIGRpZmZlcmVuY2UKCWIgKmdldF9kaWZmZXJlbmNlCgoqc3dhcHBlZF9kaWZmZXJlbmNlOgoJbG9hZCAyNTMgLy8gZWxlbWVudCBsZW5ndGgKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50CglpbnQgMAoJc3RvcmUgMjQ5IC8vIHN1YnRyYWN0IGhlYWQgZGlmZmVyZW5jZQoKKmdldF9kaWZmZXJlbmNlOgoJLSAvLyBnZXQgbGVuZ3RoIGRpZmZlcmVuY2UKCXN0b3JlIDI1MCAvLyBsZW5ndGggZGlmZmVyZW5jZQoJcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Rahat",
    "desc": "",
    "methods": [
      {
        "name": "createProject",
        "desc": "A method to create a project",
        "args": [
          {
            "name": "_assetId",
            "type": "uint64"
          },
          {
            "name": "_project",
            "type": "(string,address,address[])"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addAdminToProject",
        "desc": "A method to assign beneficiary to projects",
        "args": [
          {
            "name": "_address",
            "type": "address",
            "desc": "Address of admin to be assigned"
          },
          {
            "name": "_assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "getProject",
        "desc": "A method to get admin",
        "args": [
          {
            "name": "_assetId",
            "type": "uint64",
            "desc": "Address of admin to be assigned"
          }
        ],
        "returns": {
          "type": "(string,address,address[])",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "createAnAsset",
        "desc": "A method to create token",
        "args": [
          {
            "name": "asaName",
            "type": "string",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "asaSymbol",
            "type": "string",
            "desc": "Address of beneficiary to send token"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendTokenToBeneficiary",
        "desc": "A method to send tokens to beneficiary",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to send token"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send"
          },
          {
            "name": "assetId",
            "type": "uint64",
            "desc": ": AssetID of token to be sent"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkAdminRecursive",
        "args": [
          {
            "name": "admins",
            "type": "address[]"
          },
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "freezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unfreezeBeneficiaryAsset",
        "desc": "A method to unfreeze token",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to unfreeze asset"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendTokenToVendor",
        "desc": "A method to send tokens to vendors",
        "args": [
          {
            "name": "venderAddress",
            "type": "address",
            "desc": "Address of vendor to receive tokens"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of token to send to vendor"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawbackBeneficiaryAsset",
        "desc": "A method to clawback asset",
        "args": [
          {
            "name": "benAddress",
            "type": "address",
            "desc": "Address of beneficiary to be clawbacked"
          },
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "Asset id of asset"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount, will be replace when box-issue is fixed"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Rahat smart contract.
 */
export type Rahat = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createProject(uint64,(string,address,address[]))void' | 'createProject', {
      argsObj: {
        _assetId: bigint | number
        _project: [string, string, string[]]
      }
      argsTuple: [_assetId: bigint | number, _project: [string, string, string[]]]
      returns: void
    }>
    & Record<'addAdminToProject(address,uint64)void' | 'addAdminToProject', {
      argsObj: {
        /**
         * Address of admin to be assigned
         */
        _address: string
        _assetId: bigint | number
      }
      argsTuple: [_address: string, _assetId: bigint | number]
      /**
       * The result of the operation
       */
      returns: void
    }>
    & Record<'getProject(uint64)(string,address,address[])' | 'getProject', {
      argsObj: {
        /**
         * Address of admin to be assigned
         */
        _assetId: bigint | number
      }
      argsTuple: [_assetId: bigint | number]
      /**
       * The result of the operation
       */
      returns: [string, string, string[]]
    }>
    & Record<'createAnAsset(string,string)uint64' | 'createAnAsset', {
      argsObj: {
        /**
         * Address of beneficiary to send token
         */
        asaName: string
        /**
         * Address of beneficiary to send token
         */
        asaSymbol: string
      }
      argsTuple: [asaName: string, asaSymbol: string]
      returns: bigint
    }>
    & Record<'sendTokenToBeneficiary(address,uint64,uint64)void' | 'sendTokenToBeneficiary', {
      argsObj: {
        /**
         * Address of beneficiary to send token
         */
        benAddress: string
        /**
         * Amount of token to send
         */
        amount: bigint | number
        /**
         * : AssetID of token to be sent
         */
        assetId: bigint | number
      }
      argsTuple: [benAddress: string, amount: bigint | number, assetId: bigint | number]
      returns: void
    }>
    & Record<'checkAdminRecursive(address[],address,uint64)bool' | 'checkAdminRecursive', {
      argsObj: {
        admins: string[]
        address: string
        index: bigint | number
      }
      argsTuple: [admins: string[], address: string, index: bigint | number]
      returns: boolean
    }>
    & Record<'freezeBeneficiaryAsset(address,uint64)void' | 'freezeBeneficiaryAsset', {
      argsObj: {
        /**
         * Address of beneficiary to unfreeze asset
         */
        benAddress: string
        assetId: bigint | number
      }
      argsTuple: [benAddress: string, assetId: bigint | number]
      returns: void
    }>
    & Record<'unfreezeBeneficiaryAsset(address,uint64)void' | 'unfreezeBeneficiaryAsset', {
      argsObj: {
        /**
         * Address of beneficiary to unfreeze asset
         */
        benAddress: string
        assetId: bigint | number
      }
      argsTuple: [benAddress: string, assetId: bigint | number]
      returns: void
    }>
    & Record<'sendTokenToVendor(address,uint64,uint64)void' | 'sendTokenToVendor', {
      argsObj: {
        /**
         * Address of vendor to receive tokens
         */
        venderAddress: string
        /**
         * Amount of token to send to vendor
         */
        amount: bigint | number
        assetId: bigint | number
      }
      argsTuple: [venderAddress: string, amount: bigint | number, assetId: bigint | number]
      returns: void
    }>
    & Record<'clawbackBeneficiaryAsset(address,uint64,uint64)void' | 'clawbackBeneficiaryAsset', {
      argsObj: {
        /**
         * Address of beneficiary to be clawbacked
         */
        benAddress: string
        /**
         * Asset id of asset
         */
        assetId: bigint | number
        /**
         * Amount, will be replace when box-issue is fixed
         */
        amount: bigint | number
      }
      argsTuple: [benAddress: string, assetId: bigint | number, amount: bigint | number]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type RahatSig = keyof Rahat['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends RahatSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Rahat smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends RahatSig> = Rahat['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Rahat smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RahatSig> = Rahat['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type RahatCreateCalls = (typeof RahatCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type RahatCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type RahatDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: RahatCreateCalls) => RahatCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class RahatCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Rahat smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createProject(uint64,(string,address,address[]))void ABI method
   *
   * A method to create a project
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProject(args: MethodArgs<'createProject(uint64,(string,address,address[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createProject(uint64,(string,address,address[]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args._assetId, args._project],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addAdminToProject(address,uint64)void ABI method
   *
   * A method to assign beneficiary to projects
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addAdminToProject(args: MethodArgs<'addAdminToProject(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addAdminToProject(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._address, args._assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProject(uint64)(string,address,address[]) ABI method
   *
   * A method to get admin
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProject(args: MethodArgs<'getProject(uint64)(string,address,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProject(uint64)(string,address,address[])' as const,
      methodArgs: Array.isArray(args) ? args : [args._assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAnAsset(string,string)uint64 ABI method
   *
   * A method to create token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAnAsset(args: MethodArgs<'createAnAsset(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAnAsset(string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asaName, args.asaSymbol],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendTokenToBeneficiary(address,uint64,uint64)void ABI method
   *
   * A method to send tokens to beneficiary
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendTokenToBeneficiary(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.amount, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the checkAdminRecursive(address[],address,uint64)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkAdminRecursive(args: MethodArgs<'checkAdminRecursive(address[],address,uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'checkAdminRecursive(address[],address,uint64)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.admins, args.address, args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the freezeBeneficiaryAsset(address,uint64)void ABI method
   *
   * A method to unfreeze token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static freezeBeneficiaryAsset(args: MethodArgs<'freezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'freezeBeneficiaryAsset(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unfreezeBeneficiaryAsset(address,uint64)void ABI method
   *
   * A method to unfreeze token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unfreezeBeneficiaryAsset(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendTokenToVendor(address,uint64,uint64)void ABI method
   *
   * A method to send tokens to vendors
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendTokenToVendor(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.venderAddress, args.amount, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clawbackBeneficiaryAsset(address,uint64,uint64)void ABI method
   *
   * A method to clawback asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clawbackBeneficiaryAsset(args: MethodArgs<'clawbackBeneficiaryAsset(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clawbackBeneficiaryAsset(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.benAddress, args.assetId, args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Rahat smart contract
 */
export class RahatClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `RahatClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Rahat['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Rahat smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: RahatDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(RahatCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Rahat smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(RahatCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Rahat smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createProject(uint64,(string,address,address[]))void ABI method.
   *
   * A method to create a project
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProject(args: MethodArgs<'createProject(uint64,(string,address,address[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.createProject(args, params))
  }

  /**
   * Calls the addAdminToProject(address,uint64)void ABI method.
   *
   * A method to assign beneficiary to projects
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The result of the operation
   */
  public addAdminToProject(args: MethodArgs<'addAdminToProject(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.addAdminToProject(args, params))
  }

  /**
   * Calls the getProject(uint64)(string,address,address[]) ABI method.
   *
   * A method to get admin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The result of the operation
   */
  public getProject(args: MethodArgs<'getProject(uint64)(string,address,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.getProject(args, params))
  }

  /**
   * Calls the createAnAsset(string,string)uint64 ABI method.
   *
   * A method to create token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAnAsset(args: MethodArgs<'createAnAsset(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.createAnAsset(args, params))
  }

  /**
   * Calls the sendTokenToBeneficiary(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to beneficiary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.sendTokenToBeneficiary(args, params))
  }

  /**
   * Calls the checkAdminRecursive(address[],address,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkAdminRecursive(args: MethodArgs<'checkAdminRecursive(address[],address,uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.checkAdminRecursive(args, params))
  }

  /**
   * Calls the freezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public freezeBeneficiaryAsset(args: MethodArgs<'freezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.freezeBeneficiaryAsset(args, params))
  }

  /**
   * Calls the unfreezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.unfreezeBeneficiaryAsset(args, params))
  }

  /**
   * Calls the sendTokenToVendor(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to vendors
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.sendTokenToVendor(args, params))
  }

  /**
   * Calls the clawbackBeneficiaryAsset(address,uint64,uint64)void ABI method.
   *
   * A method to clawback asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clawbackBeneficiaryAsset(args: MethodArgs<'clawbackBeneficiaryAsset(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RahatCallFactory.clawbackBeneficiaryAsset(args, params))
  }

  public compose(): RahatComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createProject(args: MethodArgs<'createProject(uint64,(string,address,address[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addAdminToProject(args: MethodArgs<'addAdminToProject(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addAdminToProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProject(args: MethodArgs<'getProject(uint64)(string,address,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAnAsset(args: MethodArgs<'createAnAsset(string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAnAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendTokenToBeneficiary(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkAdminRecursive(args: MethodArgs<'checkAdminRecursive(address[],address,uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkAdminRecursive(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      freezeBeneficiaryAsset(args: MethodArgs<'freezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.freezeBeneficiaryAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unfreezeBeneficiaryAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendTokenToVendor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clawbackBeneficiaryAsset(args: MethodArgs<'clawbackBeneficiaryAsset(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clawbackBeneficiaryAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as RahatComposer
  }
}
export type RahatComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createProject(uint64,(string,address,address[]))void ABI method.
   *
   * A method to create a project
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProject(args: MethodArgs<'createProject(uint64,(string,address,address[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'createProject(uint64,(string,address,address[]))void'>]>

  /**
   * Calls the addAdminToProject(address,uint64)void ABI method.
   *
   * A method to assign beneficiary to projects
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addAdminToProject(args: MethodArgs<'addAdminToProject(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'addAdminToProject(address,uint64)void'>]>

  /**
   * Calls the getProject(uint64)(string,address,address[]) ABI method.
   *
   * A method to get admin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProject(args: MethodArgs<'getProject(uint64)(string,address,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'getProject(uint64)(string,address,address[])'>]>

  /**
   * Calls the createAnAsset(string,string)uint64 ABI method.
   *
   * A method to create token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAnAsset(args: MethodArgs<'createAnAsset(string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'createAnAsset(string,string)uint64'>]>

  /**
   * Calls the sendTokenToBeneficiary(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to beneficiary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendTokenToBeneficiary(args: MethodArgs<'sendTokenToBeneficiary(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'sendTokenToBeneficiary(address,uint64,uint64)void'>]>

  /**
   * Calls the checkAdminRecursive(address[],address,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkAdminRecursive(args: MethodArgs<'checkAdminRecursive(address[],address,uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'checkAdminRecursive(address[],address,uint64)bool'>]>

  /**
   * Calls the freezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  freezeBeneficiaryAsset(args: MethodArgs<'freezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'freezeBeneficiaryAsset(address,uint64)void'>]>

  /**
   * Calls the unfreezeBeneficiaryAsset(address,uint64)void ABI method.
   *
   * A method to unfreeze token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfreezeBeneficiaryAsset(args: MethodArgs<'unfreezeBeneficiaryAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'unfreezeBeneficiaryAsset(address,uint64)void'>]>

  /**
   * Calls the sendTokenToVendor(address,uint64,uint64)void ABI method.
   *
   * A method to send tokens to vendors
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendTokenToVendor(args: MethodArgs<'sendTokenToVendor(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'sendTokenToVendor(address,uint64,uint64)void'>]>

  /**
   * Calls the clawbackBeneficiaryAsset(address,uint64,uint64)void ABI method.
   *
   * A method to clawback asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clawbackBeneficiaryAsset(args: MethodArgs<'clawbackBeneficiaryAsset(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, MethodReturn<'clawbackBeneficiaryAsset(address,uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Rahat smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): RahatComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): RahatComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<RahatComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<RahatComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type RahatComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type RahatComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
